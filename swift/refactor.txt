

# Migration Guide

## 1. Location Management

**Before:**
- LocationManager class handled all location logic
- Created at app launch and passed down through views
- Direct function calls to LocationManager instance
```swift
// Old pattern
locationManager.startUpdatingLocation()
locationManager.isWithinSafeZone(coordinate)
```

**After:**
- LocationService singleton with environment object pattern
- Created at app root, available everywhere
- All location-related functions through LocationService
```swift
// New pattern in any view
@EnvironmentObject var locationService: LocationService

// Functions will change from:
locationManager.isNearCalPoly
// to:
locationService.isWithinRecommendationRange(location)
```

## 2. Data Management

**Before:**
- Separate StructureData and MapPointManager classes
- Each managed their own loading/saving
- Direct function calls to instances
```swift
// Old pattern
structureData.markStructureAsVisited(number)
mapPointManager.markPointAsVisited(point)
```

**After:**
- Single DataStore handling both data types
- All persistence in one place
- Access through environment object
```swift
// New pattern in any view
@EnvironmentObject var dataStore: DataStore

// Functions will change from:
structureData.markStructureAsVisited(number)
// to:
dataStore.markStructureAsVisited(number)

// Data access changes from:
structureData.structures
// to:
dataStore.structures
```

## Common Migration Patterns

1. **View Property Changes:**
```swift
// OLD
@ObservedObject var structureData: StructureData
@ObservedObject var mapPointManager: MapPointManager
@ObservedObject var locationManager: LocationManager

// NEW
@EnvironmentObject var dataStore: DataStore
@EnvironmentObject var locationService: LocationService
```

2. **Function Access:**
```swift
// OLD
func onVisit() {
    structureData.markAsVisited(1)
    mapPointManager.updatePoint(point)
    if locationManager.isWithinSafeZone(...) {
        // do something
    }
}

// NEW
func onVisit() {
    dataStore.markStructureAsVisited(1)
    dataStore.markPointAsVisited(point)
    if locationService.isWithinSafeZone(...) {
        // do something
    }
}
```
